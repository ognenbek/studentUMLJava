# advancedrules.txt
# Use # to comment a line
# Use :- to define a fact template
# Use $ to define a simplification

# FACT TEMPLATES

:- DiagramModel belongsTo(this,getGraphicalElements.this)
:- ADModel diagram(this,'getDiagramName',"ad")
:- UCDModel diagram(this,'getDiagramName',"ucd")
:- CCDModel diagram(this,'getDiagramName',"ccd")
:- SDModel diagram(this,'getDiagramName',"sd")
:- DCDModel diagram(this,'getDiagramName',"dcd")

:- UCDComponent ucdComponent(this,'getName')
:- UCDComponentGR responsibleFor(getUCDComponent,this)

:- NodeComponent node(this,'getName')
:- NodeComponentGR responsibleFor(getNodeComponent,this)
:- NodeComponent nodeContext(this,'getContextHash')

:- Edge edge(this,'getGuard')
:- Edge edgeBetween(this,getSource,getTarget)
:- EdgeGR responisbleFor(getEdge,this)

:- Association association(this,'getName')
:- Association assocBetween(this,getClassA,getClassB,getDirection)
:- AssociationGR responisbleFor(getAssociation,this)

:- Aggregation aggregation(this,'getName')
:- Aggregation aggregBetween(this,getWhole,getPart)

:- Dependency dependBetween(this,getFrom,getTo)
:- DependencyGR responisbleFor(getDependency,this)

:- Generalization generBetween(this,getBaseClass,getSuperClass)
:- GeneralizationGR responisbleFor(getGeneralization,this)

:- ConceptualClass concept(this,'getName')
:- ConceptualClassGR responsibleFor(getConceptualClass,this)

:- DesignClass class(this,'getName')
:- DesignClass hasMethod(this,getMethods.this,'this.getName')
:- ClassGR responsibleFor(getDesignClass,this)

:- Attribute attribute(this,getType,getVisibilityName)

:- Method method(this,'getName','getReturnTypeAsString')
:- Method methodParam(this,getParameters.this,'this.getName','this.getTypeAsString')

:- Interface interface(this)

:- SDObject objectClass(this,getDesignClass)
:- SDObjectGR responsibleFor(getSDObject,this)
:- SDObject sdObject(this,'getName')

:- MultiObject sdObject(this,'getName')
:- MultiObjectGR responsibleFor(getMultiObject,this)
:- MultiObject objectClass(this,getDesignClass)
:- MultiObject isMultiObject(this)

:- SDMessage messBetween(this,getSource,getTarget,'getName')
:- CallMessage callMessageParam(this,getParameters.this,'this.toString')
:- CallMessage callMessage(this,getSource,getTarget,'getName','getReturnValueAsString','getRank')



:- CreateMessage createMessage(this,getSource,getTarget,'getRank')


######################################################################################################
# SIMPLIFICATIONS

$ isEdgeOutOfContext(Source,SourceContext,Target,TargetContext) :- nodeContext(Source,SourceContext),nodeContext(Target,TargetContext),edgeBetween(_,Source,Target),SourceContext \= TargetContext

$ hasMethod(Child,MethodObject,MethodName) :- generBetween(_,Child,Parent),hasMethod(Parent,MethodObject,MethodName)

$ getCCDConcept(CCDConcept) :- getCCDConcept(CCDConcept,_)
$ getCCDConcept(CCDConcept,ClassName) :- diagram(CCD,_,ccd),belongsTo(CCD,ConceptGR),responsibleFor(CCDConcept,ConceptGR),concept(CCDConcept,ClassName)
$ getCCDConcept(CCDConcept,ConceptGR,ClassName,CCD) :- diagram(CCD,_,ccd),belongsTo(CCD,ConceptGR),responsibleFor(CCDConcept,ConceptGR),concept(CCDConcept,ClassName)

$ getSDClass(SDObject,SDObjectC,SD) :- diagram(SD,_,sd),belongsTo(SD,SDGR),responsibleFor(SDObject,SDGR),objectClass(SDObject,SDObjectC) 

$ getDCDClass(DCDClass) :- getDCDClass(DCDClass,_)
$ getDCDClass(DCDClass,ClassName) :- diagram(DCD,_,dcd),belongsTo(DCD,DCDGR),responsibleFor(DCDClass,DCDGR),class(DCDClass,ClassName)
$ getDCDClass(DCDClass,DCDGR,ClassName,DCD) :- diagram(DCD,_,dcd),belongsTo(DCD,DCDGR),responsibleFor(DCDClass,DCDGR),class(DCDClass,ClassName)

$ getSDObject(SDObject) :- diagram(SD,_,sd),belongsTo(SD,SDGR),responsibleFor(SDObject,SDGR) 
$ getSDObjectFor(SDDiagram,SDObject):- diagram(SDDiagram,_,sd),belongsTo(SDDiagram,SDGR),responsibleFor(SDObject,SDGR)

$ getMethodParamsFor(DesignClass,MethodName,ParamList) :- hasMethod(DesignClass,Method,MethodName),findall(ParamName,methodParam(Method,_,ParamName,_),ParamList)
$ getCallMessageParamsFor(DesignClass,CallMessageName,ParamList,RV) :- objectClass(SDObject,DesignClass),not(isMultiObject(SDObject)),callMessage(Message,_,SDObject,CallMessageName,RV,_),findall(MessageParamName,callMessageParam(Message,_,MessageParamName),ParamList)


$ getPreviousRankFor(SomeMessage,R) :- callMessage(SomeMessage,X,_,_,_,Rank),findall(Ranks,(callMessage(_,_,X,_,_,Ranks),Ranks < Rank),List1),sort(List1,List),tail(List,R),!
$ getPreviousRankFor(SomeMessage,0) :- true
$ getNextRankFor(SomeMessage,R) :- callMessage(SomeMessage,X,_,_,_,Rank),findall(Ranks,(callMessage(_,_,X,_,_,Ranks),Ranks > Rank),List1),sort(List1,List),head(List,R),!
$ getNextRankFor(SomeMessage,10000000) :- true
$ getRankLimitsFor(SomeMessage,L,H) :- getPreviousRankFor(SomeMessage,L),getNextRankFor(SomeMessage,H)



$ onlylocalVisibility(X,Y,XYRank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,sdObject(Y,YName),callMessage(XYMessage,X,_,_,YName,XYRank),not(isMultiObject(X))
$ onlylocalVisibility(X,Y,XYRank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,createMessage(_,X,Y,XYRank),not(isMultiObject(X))

$ localVisibility(X,Y,XYRank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,sdObject(Y,YName),callMessage(XYMessage,X,_,_,YName,XYRank),not(isMultiObject(X)),!
$ localVisibility(X,Y,XYRank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,createMessage(_,X,Y,XYRank),not(isMultiObject(X)),!
$ localVisibility(_,_,-1) :- true 



$ onlyparamVisibility(X,Y,XYRank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,callMessage(XYMessage,_,X,_,_,XYRank),sdObject(Y,YName),callMessageParam(XYMessage,_,YName),not(isMultiObject(X))
$ onlyparamVisibility(X,Y,XYRank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,callMessage(XYMessage,X,Y,_,_,XYRank),callMessage(ZMessage,_,X,ZName,_,ZRank),getRankLimitsFor(XYMessage,Min,Max),ZRank >= Min,ZRank < Max,sdObject(Y,YName),callMessageParam(ZMessage,_,YName),not(isMultiObject(X))

$ paramVisibility(X,Y,XYRank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,callMessage(XYMessage,_,X,_,_,XYRank),sdObject(Y,YName),callMessageParam(XYMessage,_,YName),not(isMultiObject(X)),!
$ paramVisibility(X,Y,XYRank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,callMessage(XYMessage,X,Y,_,_,XYRank),callMessage(ZMessage,_,X,ZName,_,ZRank),getRankLimitsFor(XYMessage,Min,Max),ZRank >= Min,ZRank < Max,sdObject(Y,YName),callMessageParam(ZMessage,_,YName),not(isMultiObject(X)),!
$ paramVisibility(_,_,-1) :- true


$ doubleLocalVisibility(X,Y) :- onlylocalVisibility(X,Y,_),attributeVisibility(X1,Y1,_),X1 \= X,Y1 \= Y,objectClass(X,Cx),objectClass(X1,Cx),objectClass(Y,Cy),objectClass(Y1,Cy),getSDObjectFor(Diagram1,X),getSDObjectFor(Diagram1,Y),getSDObjectFor(Diagram2,X1),getSDObjectFor(Diagram2,Y1),Diagram1 \= Diagram2
$ localVisibility(X,Y) :- onlylocalVisibility(X,Y,Rank),Rank > -1,not(doubleLocalVisibility(X,Y))

$ doubleParamVisibility(X,Y) :- onlyparamVisibility(X,Y,_),attributeVisibility(X1,Y1,_),X1 \= X,Y1 \= Y,objectClass(X,Cx),objectClass(X1,Cx),objectClass(Y,Cy),objectClass(Y1,Cy),getSDObjectFor(Diagram1,X),getSDObjectFor(Diagram1,Y),getSDObjectFor(Diagram2,X1),getSDObjectFor(Diagram2,Y1),Diagram1 \= Diagram2
$ paramVisibility(X,Y) :- onlyparamVisibility(X,Y,Rank),Rank > -1,not(doubleParamVisibility(X,Y))



$ attributeVisibilityLocal(X,Y,XYRank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,callMessage(XYMessage,X,Y,_,_,XYRank),localVisibility(X,Y,LVRank),getRankLimitsFor(XYMessage,Min,Max),(LVRank > Max;LVRank < Min;XYRank < LVRank)
$ attributeVisibilityParam(X,Y,XYRank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,callMessage(XYMessage,X,Y,_,_,XYRank),paramVisibility(X,Y,LVRank),getRankLimitsFor(XYMessage,Min,Max),(LVRank >= Max;LVRank < Min)

$ attributeVisibility(X,Y,XYRank) :- attributeVisibilityLocal(X,Y,XYRank),attributeVisibilityParam(X,Y,XYRank)



# for param sender
$ attributeVisibility(X,Y,Rank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,callMessage(XZMessage,X,Z,_,_,XZRank),Z \= X,Z \= Y,sdObject(Y,YName),callMessageParam(XZMessage,_,YName),paramVisibility(X,Y,PXYRank),localVisibility(X,Y,LXYRank),getRankLimitsFor(XZMessage,Min,Max),((LXYRank < 0);LXYRank > XZRank;LXYRank < Min),(PXYRank < Min;PXYRank >= Max)

# for local return value
$ attributeVisibility(Z,Y,Rank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,callMessage(XZMessage,X,Z,_,YName,XZRank),Z \= X,Z \= Y,sdObject(Y,YName),localVisibility(Z,Y,PZYRank),callMessage(ZMessage,Z,_,_,YName,ZRank),PZYRank = ZRank,getRankLimitsFor(ZMessage,Min,Max),(XZRank < Min;XZRank >= Max),not(isMultiObject(Z))
$ attributeVisibility(Z,Y,Rank) :- getSDObjectFor(SD,X),getSDObjectFor(SD,Y),X \= Y,callMessage(XZMessage,X,Z,_,YName,XZRank),Z \= X,Z \= Y,sdObject(Y,YName),not(callMessage(ZMessage,Z,_,_,YName,ZRank)),not(isMultiObject(Z))


#needed for getting the last element of a list (jLog prolog lacks the list command last(List,Elem))
$ tail([E|[]],E)
$ tail([_|Tail],E) :- tail(Tail,E)
$ head([E|_],E)
 

######################################################################################################
# Consistency rules definitions
# Consistency rule name (should be smth descriptive and explanatory, no duplicate names allowed)
# expression - prolog expression that defines a consistency constraint, returns true if the constrain is satisfied
# result - (all) for all existent cases, (first) for the first case, prevents backtracking

Unnamed component in UCD {
	expression : diagram(UCD,UCDName,ucd),belongsTo(UCD,ComponentGR),responsibleFor(Component,ComponentGR),ucdComponent(Component,ComponentName),ComponentName=''
	result : all
	severity : warning
	message : There is an unnamed component in UCD diagram %UCDName . You must provide name for the component.
}

Source and target nodes of an edge do not have the same context in AD {
	expression : isEdgeOutOfContext(Source,SourceContext,Target,TargetContext)
	result : all
	severity : error
	message : There is an edge from source %Source to target %Target, where source and target nodes do not belong to the same context activity
}

Unnamed node in AD {
	expression : diagram(AD,ADName,ad),belongsTo(AD,NodeGR),responsibleFor(Node,NodeGR),node(Node,NodeName),NodeName=''
	result : all
	severity : warning
	message : There is an unnamed node in AD diagram %ADName . You must provide name for the node.
}

Unnamed conceptual class in CCD {
	expression : diagram(CCD,CCDName,ccd),belongsTo(CCD,ConceptGR),responsibleFor(CCDConcept,ConceptGR),concept(CCDConcept,ClassName),ClassName=''
	result : all
	severity : warning
	message : There is an unnamed conceptual class in CCD diagram %CCDName . You must provide name for the class.
}

Nonexistent class in DCD with the same name as in CCD {
	expression : getCCDConcept(Concept,ConceptGR,Name,CCD),not(getDCDClass(Class,ClassGR,Name,DCD)),diagram(CCD,CCDName,ccd),diagram(DCD,DCDName,dcd),not(Name='')
	result : all
	severity : warning
	message : There does not exist a class %Name in DCD Diagram %DCDName . However, conceptual class %Name exists in CCD Diagram %CCDName .
}

Unnamed class in DCD {
	expression : diagram(DCD,DCDName,dcd),belongsTo(DCD,ClassGR),responsibleFor(DCDClass,ClassGR),class(DCDClass,ClassName),ClassName = ''
	result : all
	severity : warning
	message : There is an unnamed class in DCD diagram %DCDName . You must provide name for the class.
}

Unnamed object in SD {
	expression : class(SDclass,CLName),getSDClass(SDobject,SDclass,SD),diagram(SD,SDname,sd),sdObject(SDobject,OName),OName = ''
	result : all
	severity : warning
	message : There is an unnamed object of class %CLName in SD diagram %SDname
}

Nonexistent class in DCD {
	expression : getSDClass(_,SDclass,SD),not(getDCDClass(SDclass)),class(SDclass,CLName),diagram(DCD,DCDname,dcd)
	result : all
	severity : warning
	message : There does not exist a class %CLName in DCD Diagram %DCDname
	action : DCD.addC(SDclass)
}

Method missing {
	expression : getCallMessageParamsFor(SomeClass,Name,List1,RV),getDCDClass(SomeClass,_,SCname,DCDdiag),diagram(DCDdiag,DCDname,dcd),((getMethodParamsFor(SomeClass,Name,List),List1 \= List,hasMethod(SomeClass,_,Name));(not(hasMethod(SomeClass,_,Name))))
	result : all
	severity : error
	message : Method missing for class %SCname in DCD %DCDname : method name %Name with arguments %List1 and return value %RV
}


Unhandled parameter visibility {
	expression : paramVisibility(X,Y),not(attributeVisibility(X,Y,XYRank)),diagram(DCDiag,DCDname,dcd),getDCDClass(DCX,DCXGR,DCXname,DCDiag),getDCDClass(DCY,DCYGR,DCYname,DCDdiag),objectClass(X,DCX),objectClass(Y,DCY),not(dependBetween(_,DCX,DCY)),not((assocBetween(_,DCX,DCY,0);assocBetween(_,DCY,DCX,0);assocBetween(_,DCX,DCY,1);assocBetween(_,DCY,DCX,2);aggregBetween(_,DCX,DCY)))
	result : all
	severity : error
	message : There is parameter visibility from %DCXname to %DCYname  but no dependency in DCD %DCDname
	action : DCDiag.addDep(DCXGR,DCYGR)
}


Unhandled local visibility {
	expression : localVisibility(X,Y),not(attributeVisibility(X,Y,XYRank)),diagram(DCDiag,DCDname,dcd),getDCDClass(DCX,DCXGR,DCXname,DCDiag),getDCDClass(DCY,DCYGR,DCYname,DCDdiag),objectClass(X,DCX),objectClass(Y,DCY),not(dependBetween(_,DCX,DCY)),not((assocBetween(_,DCX,DCY,0);assocBetween(_,DCY,DCX,0);assocBetween(_,DCX,DCY,1);assocBetween(_,DCY,DCX,2);aggregBetween(_,DCX,DCY)))
	result : all
	severity : error
	message : There is local visibility from %DCXname to %DCYname  but no dependency in DCD %DCDname
	action : DCDiag.addDep(DCXGR,DCYGR)
}

Unhandled object attribute visibility {
	expression : attributeVisibility(X,Y,Rank),diagram(DCDiag,DCDname,dcd),getDCDClass(DCX,DCXGR,DCXname,DCDiag),getDCDClass(DCY,DCYGR,DCYname,DCDdiag),objectClass(X,DCX),objectClass(Y,DCY),not(isMultiObject(Y)),not((assocBetween(_,DCX,DCY,0);assocBetween(_,DCY,DCX,0);assocBetween(_,DCX,DCY,1);assocBetween(_,DCY,DCX,2);aggregBetween(_,DCX,DCY)))
	result : all
	severity : error
	message : There is attribute visibility from %DCXname to %DCYname  but no association in DCD %DCDname
	action : DCDiag.addAssoc(DCXGR,DCYGR)
}

Unhandled multiobject attribute visibility {
	expression : attributeVisibility(X,Y,Rank),diagram(DCDiag,DCDname,dcd),getDCDClass(DCX,DCXGR,DCXname,DCDiag),getDCDClass(DCY,DCYGR,DCYname,DCDdiag),objectClass(X,DCX),objectClass(Y,DCY),isMultiObject(Y),not(aggregBetween(_,DCX,DCY))
	result : all
	severity : error
	message : There is attribute visibility from %DCXname to %DCYname  but no aggregation in DCD %DCDname
	action : DCDiag.addAggreg(DCXGR,DCYGR)
}

